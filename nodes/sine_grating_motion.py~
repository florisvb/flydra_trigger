#!/usr/bin/env python
import sys, os
from optparse import OptionParser

import rospy
from flydra_triggers.msg import *
import time
from std_msgs.msg import *
import numpy as np


############################
#  Import various modules  #
############################

import VisionEgg
VisionEgg.start_default_logging(); VisionEgg.watch_exceptions()

from VisionEgg.Core import *
from VisionEgg.FlowControl import Presentation
from VisionEgg.Gratings import *


class VisualController:
    def __init__(self, p):
        self.p = p
        # Create instances of the Controller class
        #sine_grating_controller = FunctionController(during_go_func=self.motion_controller)

        #############################################################
        #  Connect the controllers with the variables they control  #
        #############################################################

        #self.p.add_controller(self.checkerboard_wall,'temporal_freq_hz', sine_grating_controller )
        #self.p.add_controller(self.checkerboard_floor,'temporal_freq_hz', sine_grating_controller )

        ########################
        #  Define controllers  #
        ########################
        
        # ROS
        #time.sleep(20)
        #

        

    def motion_controller(self, t):
        #print 'motion_controller', self.temporal_frequency
        return self.temporal_frequency


    def callback(self, data):
        #self.checkerboard_floor.parameters.temporal_freq_hz = self.temporal_frequency
        self.temporal_frequency = data.temporal_frequency
        print data.temporal_frequency

    

if __name__ == '__main__':
    # Initialize OpenGL graphics screen.
    #screen = get_default_screen()
    screen = VisionEgg.Core.Screen( size = (1280,720) )
    screen.parameters.bgcolor = (0,0,0,0)
    temporal_frequency = 0

    ##########################
    #  Create the flat drum  #
    ##########################

    # Get a texture
    #filename = "checkerboard_2048_85_gray.jpg"
    #checkerboard_texture = Texture(filename)

    # Create an instance of SpinningDrum class
    '''
    checkerboard_wall =  SpinningDrum(	texture=checkerboard_texture,
			            shrink_texture_ok=1,
			            flat=1,
			            flat_size=(1500,1500),
			            anchor='center',
			            position=(1100,700),
			            )
    '''		        
    checkerboard_wall = SinGrating2D(   position         = (1100,700),
                                        anchor           = 'center',
                                        size             = ( 1500 , 1500 ),
                                        spatial_freq     = 8.0 / screen.size[0], # units of cycles/pixel
                                        temporal_freq_hz = temporal_frequency,
                                        orientation      = 0. )

    '''
    checkerboard_floor =  SpinningDrum(	texture=checkerboard_texture,
			            shrink_texture_ok=1,
			            flat=1,
			            flat_size=(1875,1875),
			            anchor='center',
			            position=(1100,500),
			            )
    '''
    checkerboard_floor = SinGrating2D(   position         = (1100,500),
                                        anchor           = 'center',
                                        size             = ( 1875 , 1875 ),
                                        spatial_freq     = 8.0 / screen.size[0], # units of cycles/pixel
                                        temporal_freq_hz = temporal_frequency,
                                        orientation      = 0. )

                     
    #########################
    #  Create the viewport  #
    #########################

    # Create a viewport for the target
    viewport_left = Viewport( screen=screen, position=(0,0), size=(1920,160), stimuli=[checkerboard_wall] )
    viewport_bottom = Viewport( screen=screen, position=(0,200), size=(1920,270), stimuli=[checkerboard_floor] )
    viewport_right = Viewport( screen=screen, position=(0,550), size=(1920,200), stimuli=[checkerboard_wall] )

    ##################################################
    #  Create an instance of the Presentation class  #
    ##################################################

    # Add target_viewport last so its stimulus is drawn last. This way the
    # target is always drawn after (on top of) the drum and is therefore
    # visible.
    p = Presentation(go_duration=('20', 'seconds'),viewports=[viewport_left, viewport_bottom, viewport_right]) 


    visual_controller = VisualController(p)
    
    rospy.Subscriber("preferred_obj_id", sine_grating, visual_controller.callback)
    rospy.init_node('visual_controller', anonymous=True)
    
    visual_controll.p.go()
